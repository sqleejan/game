swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /auth/token:
    post:
      tags:
      - auth
      description: create token
      operationId: AuthController.Token
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/.TmpClaims'
      responses:
        "200":
          description: '{string} token'
        "403":
          description: body is empty
  /auth/user/create:
    post:
      tags:
      - auth
      description: 临时创建用户
      operationId: AuthController.临时创建用户
      parameters:
      - in: query
        name: uid
        description: The uid for user
        required: true
        type: string
      - in: query
        name: nicname
        description: The nicname for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} set success'
        "403":
          description: uid is null
  /cattle/create:
    post:
      tags:
      - cattle
      description: set rancher
      operationId: CattleController.起庄
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for rancher
        required: true
        type: string
      - in: body
        name: body
        description: body for rancher
        required: true
        schema:
          $ref: '#/definitions/.RedReq'
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /cattle/gain:
    get:
      tags:
      - cattle
      description: gain cattle
      operationId: CattleController.Gain cattle
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for cattle
        required: true
        type: string
      responses:
        "200":
          description: '{int} score number'
        "403":
          description: query is empty
  /cattle/master:
    post:
      tags:
      - cattle
      description: fetch rancher
      operationId: CattleController.抢庄
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for rancher
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /cattle/send:
    get:
      tags:
      - cattle
      description: Distribute cattle
      operationId: CattleController.Distribute
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for cattle
        required: true
        type: string
      responses:
        "200":
          description: '{body} models.Marks'
        "403":
          description: query is empty
  /room/:
    get:
      tags:
      - room
      description: get all Rooms
      operationId: RoomController.GetAll
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/.RoomRespone'
    post:
      tags:
      - room
      description: create room
      operationId: RoomController.CreateRoom
      parameters:
      - in: body
        name: body
        description: body for room content
        required: true
        schema:
          $ref: '#/definitions/.RoomReq'
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/.RoomRespone'
        "403":
          description: body is empty
  /room/{roomid}:
    get:
      tags:
      - room
      description: get user by roomid
      operationId: RoomController.Get
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: path
        name: roomid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/.RoomRespone'
        "403":
          description: :roomid is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: Get User
      operationId: UserController.Get User
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: path
        name: uid
        description: The uid for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} set success'
        "403":
          description: uid is null
  /user/assistant:
    post:
      tags:
      - user
      description: Set Assistant
      operationId: UserController.Set Assistant
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for user
        required: true
        type: string
      - in: query
        name: uid
        description: The uid for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} set success'
        "403":
          description: body is empty
  /user/join:
    post:
      tags:
      - user
      description: Join Room
      operationId: UserController.Join Room
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} token'
        "403":
          description: body is empty
  /user/self:
    get:
      tags:
      - user
      description: Get Self
      operationId: UserController.Self
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/auth.MyCustomClaims'
definitions:
  .Object:
    type: object
  .RedReq:
    type: object
  .RoomReq:
    type: object
  .RoomRespone:
    type: object
  .StandardClaims:
    type: object
  .TmpClaims:
    type: object
  auth.MyCustomClaims:
    title: MyCustomClaims
    type: object
tags:
- name: auth
  description: |
    Operations about auth
- name: room
  description: |
    Operations about Rooms
- name: user
  description: |
    Operations about Users
- name: cattle
  description: |
    Operations about Cattle

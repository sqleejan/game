swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /auth/admin/login:
    get:
      tags:
      - auth
      description: 管理员登陆页
      operationId: AuthController.管理员登陆页
      responses:
        "200":
          description: '{string} set success'
    post:
      tags:
      - auth
      description: 管理员登陆
      operationId: AuthController.管理员登陆
      responses:
        "200":
          description: '{string} set success'
  /auth/admin/update:
    post:
      tags:
      - auth
      description: 管理员密码更新
      operationId: AuthController.管理员密码更新
      responses:
        "200":
          description: '{string} set success'
  /auth/token:
    post:
      tags:
      - auth
      description: create token
      operationId: AuthController.Token
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.TmpClaims'
      responses:
        "200":
          description: '{string} token'
        "403":
          description: body is empty
  /auth/user/create:
    post:
      tags:
      - auth
      description: 临时创建用户
      operationId: AuthController.临时创建用户
      parameters:
      - in: query
        name: uid
        description: The uid for user
        required: true
        type: string
      - in: query
        name: nicname
        description: The nicname for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} set success'
        "403":
          description: uid is null
  /auth/wx/code:
    post:
      tags:
      - auth
      description: 微信认证
      operationId: AuthController.微信认证
      parameters:
      - in: query
        name: state
        description: 房间ID
        type: string
      - in: query
        name: code
        description: 微信code
        type: string
      responses:
        "200":
          description: '{string} token'
  /auth/wx/login:
    post:
      tags:
      - auth
      description: 微信认证
      operationId: AuthController.微信认证
      parameters:
      - in: query
        name: roomid
        description: 房间ID
        type: string
      responses:
        "200":
          description: '{string} token'
  /cattle/config:
    post:
      tags:
      - cattle
      description: config redhat
      operationId: CattleController.配置庄
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for rancher
        required: true
        type: string
      - in: body
        name: body
        description: body for rancher
        required: true
        schema:
          $ref: '#/definitions/models.RedReq'
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /cattle/create:
    post:
      tags:
      - cattle
      description: set rancher
      operationId: CattleController.起庄
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for rancher
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
  /cattle/discard:
    post:
      tags:
      - cattle
      description: 弃庄
      operationId: CattleController.弃庄
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for rancher
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
  /cattle/gain:
    get:
      tags:
      - cattle
      description: gain cattle
      operationId: CattleController.Gain cattle
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for cattle
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.ScoreUnion'
        "403":
          description: query is empty
  /cattle/master:
    post:
      tags:
      - cattle
      description: fetch rancher
      operationId: CattleController.抢庄
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for rancher
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: body is empty
  /cattle/send:
    post:
      tags:
      - cattle
      description: Distribute cattle
      operationId: CattleController.Distribute
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for cattle
        required: true
        type: string
      - in: body
        name: body
        description: body for DiverReq
        required: true
        schema:
          $ref: '#/definitions/models.DiverReq'
      responses:
        "200":
          description: '{body} models.Marks'
        "403":
          description: query is empty
  /room/:
    post:
      tags:
      - room
      description: create room
      operationId: RoomController.CreateRoom
      parameters:
      - in: body
        name: body
        description: body for room content
        required: true
        schema:
          $ref: '#/definitions/models.TmpRoomReq'
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.TmpRespone'
        "403":
          description: body is empty
  /room/{roomid}:
    get:
      tags:
      - room
      description: get user by roomid
      operationId: RoomController.Get
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: path
        name: roomid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.TmpRespone'
        "403":
          description: :roomid is empty
    delete:
      tags:
      - room
      description: delete room
      operationId: RoomController.Delete Room
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: path
        name: roomid
        description: The roomid
        required: true
        type: string
      responses:
        "200":
          description: '{string} ok'
        "403":
          description: :roomid is empty
  /room/{roomid}/bill:
    get:
      tags:
      - room
      description: get bill for roomid
      operationId: RoomController.Bill
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: limit
        description: The default is 20
        type: integer
        format: int64
      - in: query
        name: page
        description: The default is 1
        type: integer
        format: int64
      - in: path
        name: roomid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
        "403":
          description: :roomid is empty
  /room/config:
    post:
      tags:
      - room
      description: config room
      operationId: RoomController.ConfigRoom
      parameters:
      - in: body
        name: body
        description: body for room content
        required: true
        schema:
          $ref: '#/definitions/models.TmpRoomConfig'
      - in: query
        name: roomid
        description: The id for room
        required: true
        type: string
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} ok'
        "403":
          description: body is empty
  /room/list:
    get:
      tags:
      - room
      description: get all Rooms
      operationId: RoomController.GetAll
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: limit
        description: The default is 20
        type: integer
        format: int64
      - in: query
        name: page
        description: The default is 1
        type: integer
        format: int64
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.TmpRespone'
  /room/listdb:
    get:
      tags:
      - room
      description: get room Listdb
      operationId: RoomController.Listdb
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: limit
        description: The default is 20
        type: integer
        format: int64
      - in: query
        name: page
        description: The default is 1
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} success'
  /room/request:
    post:
      tags:
      - room
      description: 申请房间
      operationId: RoomController.房间申请
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: body
        name: body
        description: body for room content
        required: true
        schema:
          $ref: '#/definitions/models.DBRoomPost'
      responses:
        "200":
          description: '{string} ok'
  /room/request/{id}:
    post:
      tags:
      - room
      description: 接受房间申请
      operationId: RoomController.接受房间申请
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: path
        name: id
        description: id for room request
        required: true
        type: string
      responses:
        "200":
          description: '{string} ok'
    delete:
      tags:
      - room
      description: 删除房间申请
      operationId: RoomController.房间申请删除
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: path
        name: id
        description: id for room request
        required: true
        type: string
      responses:
        "200":
          description: '{string} ok'
  /room/request/list:
    get:
      tags:
      - room
      description: 房间申请列表
      operationId: RoomController.房间申请列表
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: limit
        description: The default is 20
        type: integer
        format: int64
      - in: query
        name: page
        description: The default is 1
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} ok'
  /user/active:
    post:
      tags:
      - user
      description: Active User
      operationId: UserController.Active User
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for user
        required: true
        type: string
      - in: query
        name: uid
        description: The uid for user
        required: true
        type: string
      - in: body
        name: body
        description: body for DiverReq
        required: true
        schema:
          $ref: '#/definitions/models.UserActiveReq'
      responses:
        "200":
          description: '{string} token'
        "403":
          description: body is empty
  /user/assistant:
    post:
      tags:
      - user
      description: Set Assistant
      operationId: UserController.Set Assistant
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for user
        required: true
        type: string
      - in: query
        name: uid
        description: The uid for user
        required: true
        type: string
      - in: query
        name: role
        description: The role for user
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} set success'
        "403":
          description: body is empty
  /user/join:
    post:
      tags:
      - user
      description: Join Room
      operationId: UserController.Join Room
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} token'
        "403":
          description: body is empty
  /user/list:
    get:
      tags:
      - user
      description: Get Users
      operationId: UserController.玩家列表
      parameters:
      - in: query
        name: token
        description: The token for user
        type: string
      - in: query
        name: roomid
        description: The roomid for user
        required: true
        type: string
      responses:
        "200":
          description: '{string} set success'
        "403":
          description: uid is null
  /user/score:
    post:
      tags:
      - user
      description: 修改积分
      operationId: UserController.修改积分
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      - in: query
        name: roomid
        description: The roomid for user
        required: true
        type: string
      - in: query
        name: score
        description: the score of user
        required: true
        type: integer
        format: int64
      - in: query
        name: uid
        description: the id of user
        required: true
        type: string
      responses:
        "200":
          description: '{string} token'
  /user/self:
    get:
      tags:
      - user
      description: Get Self
      operationId: UserController.Self
      parameters:
      - in: query
        name: token
        description: The token for user
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/auth.MyCustomClaims'
definitions:
  .StandardClaims:
    type: object
  auth.MyCustomClaims:
    title: MyCustomClaims
    type: object
  models.DBRoomPost:
    title: DBRoomPost
    type: object
    properties:
      UserId:
        type: string
      active:
        type: boolean
      create_at:
        type: string
        format: string
      duration:
        type: integer
        format: int64
      nicname:
        type: string
  models.DiverReq:
    title: DiverReq
    type: object
    properties:
      Diver:
        type: integer
        format: int64
      RedAmount:
        type: number
        format: float
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.RedReq:
    title: RedReq
    type: object
    properties:
      Number:
        type: integer
        format: int64
  models.ScoreUnion:
    title: ScoreUnion
    type: object
    properties:
      Amount:
        type: number
        format: float
      Count:
        type: integer
        format: int64
      Master:
        type: string
      Score:
        type: number
        format: float
  models.TmpClaims:
    title: TmpClaims
    type: object
    properties:
      aud:
        type: string
      exp:
        type: integer
        format: int64
      iat:
        type: integer
        format: int64
      iss:
        type: string
      jti:
        type: string
      nbf:
        type: integer
        format: int64
      sub:
        type: string
  models.TmpRespone:
    title: TmpRespone
    type: object
    properties:
      Active:
        type: boolean
      Admin:
        type: string
      Banker:
        type: string
      Base:
        type: integer
        format: int64
      CountDown:
        type: integer
        format: int64
      CountUp:
        type: integer
        format: int64
      EndTime:
        type: string
        format: string
      LenUser:
        type: integer
        format: int64
      RedCountDown:
        type: integer
        format: int64
      RedCountUp:
        type: integer
        format: int64
      RedDown:
        type: number
        format: float
      RedUp:
        type: number
        format: float
      RoomId:
        type: string
      RoomName:
        type: string
      ScoreLimit:
        type: integer
        format: int64
      ScoreSum:
        type: integer
        format: int64
      StartTime:
        type: string
        format: string
      Status:
        type: integer
        format: int64
      Timeout:
        type: integer
        format: int64
      Water:
        type: integer
        format: int64
  models.TmpRoomConfig:
    title: TmpRoomConfig
    type: object
    properties:
      Base:
        type: integer
        format: int64
      CountDown:
        type: integer
        format: int64
      CountUp:
        type: integer
        format: int64
      RedCountDown:
        type: integer
        format: int64
      RedCountUp:
        type: integer
        format: int64
      RedDown:
        type: number
        format: float
      RedUp:
        type: number
        format: float
      ScoreLimit:
        type: integer
        format: int64
      Timeout:
        type: integer
        format: int64
      Water:
        type: integer
        format: int64
  models.TmpRoomReq:
    title: TmpRoomReq
    type: object
    properties:
      Base:
        type: integer
        format: int64
      CountDown:
        type: integer
        format: int64
      CountUp:
        type: integer
        format: int64
      Duration:
        type: integer
        format: int64
      RedCountDown:
        type: integer
        format: int64
      RedCountUp:
        type: integer
        format: int64
      RedDown:
        type: number
        format: float
      RedUp:
        type: number
        format: float
      RoomName:
        type: string
      ScoreLimit:
        type: integer
        format: int64
      Timeout:
        type: integer
        format: int64
      UserId:
        type: string
      UserLimit:
        type: integer
        format: int64
      Water:
        type: integer
        format: int64
  models.UserActiveReq:
    title: UserActiveReq
    type: object
    properties:
      Active:
        type: boolean
      Nicname:
        type: string
      Score:
        type: integer
        format: int64
tags:
- name: auth
  description: |
    Operations about auth
- name: room
  description: |
    Operations about Rooms
- name: user
  description: |
    Operations about Users
- name: cattle
  description: |
    Operations about Cattle
